[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def falls_in_rectangle(self, rectangle):\n        if rectangle.point1.x < self.x < rectangle.point2.y and rectangle.point1.y < self.y < rectangle.point2.y:\n            return True\n        else:\n            return False\nclass Rectangle:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Rectangle:\n    def __init__(self, point1, point2):\n        self.point1 = point1\n        self.point2 = point2\n    def area(self):\n        return ((self.point2.x - self.point1.x) * (self.point2.y - self.point1.y))\nclass GUIrectangle(Rectangle) :\n    def draw(self, canvas):\n        canvas.penup()\n        canvas.goto(self.point1.x, self.point1.y)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GUIrectangle",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class GUIrectangle(Rectangle) :\n    def draw(self, canvas):\n        canvas.penup()\n        canvas.goto(self.point1.x, self.point1.y)\n        canvas.pendown()\n        canvas.forward(self.point2.x - self.point1.x)\n        canvas.left(90)\n        canvas.forward(self.point2.y - self.point1.y)\n        canvas.left(90)\n        canvas.forward(self.point2.x - self.point1.x)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GuiPoint",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class GuiPoint(Point):\n    def draw(self, canvas, size=15, color='red'):\n        canvas.penup()\n        canvas.goto(self.x, self.y)\n        canvas.pendown()\n        canvas.dot(size, color)\nrectangle = GUIrectangle(Point(randint(0, 400), randint(0,400)), Point(randint(10, 400),  randint(10, 400)))\nprint(\"Rectangle Coordinates: \",\n      rectangle.point1.x, \",\",\n      rectangle.point1.y, \"and\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "rectangle = GUIrectangle(Point(randint(0, 400), randint(0,400)), Point(randint(10, 400),  randint(10, 400)))\nprint(\"Rectangle Coordinates: \",\n      rectangle.point1.x, \",\",\n      rectangle.point1.y, \"and\",\n      rectangle.point2.x, \",\",\n      rectangle.point2.y)\nuser_point = GuiPoint(float(input(\"Guess x coordinate of point: \")), float(input(\"Guess y coordinate of point: \")))\nuser_area = float(input(\"Guess rectangle area: \"))\nprint(\"Your point was inside the rectangle\", user_point.falls_in_rectangle(rectangle))\nprint(\"Your area was off by\", rectangle.area() - user_area)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "user_point",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "user_point = GuiPoint(float(input(\"Guess x coordinate of point: \")), float(input(\"Guess y coordinate of point: \")))\nuser_area = float(input(\"Guess rectangle area: \"))\nprint(\"Your point was inside the rectangle\", user_point.falls_in_rectangle(rectangle))\nprint(\"Your area was off by\", rectangle.area() - user_area)\nmyturtle = turtle.Turtle()\nrectangle.draw(canvas=myturtle)\nuser_point.draw(canvas=myturtle)\nturtle.done()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "user_area",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "user_area = float(input(\"Guess rectangle area: \"))\nprint(\"Your point was inside the rectangle\", user_point.falls_in_rectangle(rectangle))\nprint(\"Your area was off by\", rectangle.area() - user_area)\nmyturtle = turtle.Turtle()\nrectangle.draw(canvas=myturtle)\nuser_point.draw(canvas=myturtle)\nturtle.done()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "myturtle",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "myturtle = turtle.Turtle()\nrectangle.draw(canvas=myturtle)\nuser_point.draw(canvas=myturtle)\nturtle.done()",
        "detail": "main",
        "documentation": {}
    }
]